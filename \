import numpy as np
import math
import utility
import matplotlib.pyplot as plt

class Lattice:
    def __init__(self, x, y):
        self.x, self.y = x,y
        A = np.empty((x,y))
        self.obs = A.copy()
        self.obs.fill(0)
        self.that = np.array([[[0.,0.] for yy in range(y)] for xx in range(x)]) #T^
        self.termini = self.obs.copy()

    def transmute(self, x,y, target = None):
        if target == None:
            self.obs[x,y] = not self.obs[x,y]
        elif target:
            self.obs[x,y] = 1
        else:
            self.obs[x,y] = 0

    def set_that(self, x,y):
        neighbors = [self.obs[x+1,y] or (1. if x == self.x else 0.) ,self.obs[x,y+1] or (1. if y == self.y else 0.),self.obs[x-1,y] or (1. if x == 0 else 0.), self.obs[x,y-1] or (1. if y == 0 else 0.) ]
        if neighbors == [0,1,1,1] or neighbors == [1,1,0,1]:
            self.that[x,y] = [0,1]
        if neighbors == [1,0,1,1] or neighbors == [1,1,1,0]:
            self.that[x,y] = [1,0]


        if neighbors == [0,0,1,1]:
            ytest = y
            xtest = x+1
            while ytest >0 and not self.obs[xtest,ytest]:
                ytest -= 1
            if ytest == -1:
                u0 = np.array([0,1])
            else:
                while xtest+1 < self.x and self.obs[xtest+1,ytest]:
                    xtest += 1
                enorm = math.sqrt((xtest-x)**2+(y-ytest)**2)
                u0 = np.array([(x-xtest)/enorm, (y-ytest)/enorm])
            ytest = y+1
            xtest = x
            while xtest >= 0 and not self.obs[xtest,ytest]:
                xtest -= 1
            if xtest == -1:
                u1 = np.array([-1,0])
            else:
                while ytest+1 < self.y and self.obs[xtest,ytest+1]:
                    ytest += 1
                enorm = math.sqrt((ytest-y)**2+(xtest-x)**2)
                u1 = np.array([(xtest-x)/enorm, (ytest-y)/enorm])
            print(u0,u1)
            u = (u0+u1)/np.linalg.norm(u0+u1)
            self.that[x,y,0], self.that[x,y,1] = u[0],u[1]


        if neighbors == [1,0,0,1]:
            ytest = y
            while ytest >=0 and not self.obs[x-1,ytest]:
                ytest -= 1
            if ytest == -1:
                u0 = np.array([0,-1])
            else:
                enorm = math.sqrt(1+(ytest-y)**2)
                u0 = np.array([-1/enorm, (ytest-y)/enorm])
            xtest = x
            while xtest < self.x and not self.obs[xtest,y+1]:
                xtest += 1
            if xtest == self.x:
                u1 = np.array([-1,0])
            else:
                enorm = math.sqrt(1+(xtest-x)**2)
                u1 = np.array([(xtest-x)/enorm, -1/enorm])
            u = (u0+u1)/np.linalg.norm(u0+u1)
            self.that[x,y,0], self.that[x,y,1] = u[0],u[1]
                

        if neighbors == [1,1,0,0]:
            ytest = y
            while ytest < self.y and not self.obs[x+1,ytest]:
                print(x+1,ytest)
                ytest += 1
            if ytest == self.y:
                u0 = np.array([0,1])
            else:
                enorm = math.sqrt(1+(ytest-y)**2)
                u0 = np.array([1/enorm, (ytest-y)/enorm])
            xtest = x
            while xtest >= 0 and not self.obs[xtest,y+1]:
                xtest -= 1
            if xtest == -1:
                u1 = np.array([1,0])
            else:
                enorm = math.sqrt(1+(xtest-x)**2)
                u1 = np.array([(xtest-x)/enorm, 1/enorm])
            u = (u0+u1)/np.linalg.norm(u0+u1)
            self.that[x,y,0], self.that[x,y,1] = u[0],u[1]
                

        if neighbors == [1,0,0,1]:
            ytest = y
            while ytest < self.y and not self.obs[x+1,ytest]:
                print(x+1,ytest)
                ytest += 1
            if ytest == self.y:
                u0 = np.array([0,1])
            else:
                enorm = math.sqrt(1+(ytest-y)**2)
                u0 = np.array([1/enorm, (ytest-y)/enorm])
            xtest = x
            while xtest >= 0 and not self.obs[xtest,y+1]:
                xtest -= 1
            if xtest == -1:
                u1 = np.array([1,0])
            else:
                enorm = math.sqrt(1+(xtest-x)**2)
                u1 = np.array([(xtest-x)/enorm, 1/enorm])
            u = (u0+u1)/np.linalg.norm(u0+u1)
            self.that[x,y,0], self.that[x,y,1] = u[0],u[1]
                

    def plot(self):
        plt.plot([0,0,self.x,self.x,0],[0,self.y,self.y,0,0], color = 'purple')
        plt.axis('square')
        x,y = [],[]
        for m in range(self.x):
            for n in range(self.y):
                if self.obs[m,n]:
                    x.append(m)
                    y.append(n)
                if self.that[m,n,0] != 0 or self.that[m,n,1] != 0:
                    plt.plot([m-self.that[m,n,0]/2, m+ self.that[m,n,0]/2], [n-self.that[m,n,1]/2, n+self.that[m,n,1]/2], color = 'red')
        plt.scatter(x,y, color = 'black')
        plt.show()
